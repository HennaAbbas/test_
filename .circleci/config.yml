version: 2.1
#test
parameters:
  nightly_cleanup:
    default: false
    type: boolean

orbs:
  pulumi: pulumi/pulumi@1.0.0
  gh: circleci/github-cli@1.0

jobs:
  delete-obsolete-stacks:
    docker:
      - image: cimg/python:3.7
        auth:
          username: firstvettech
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/firstvet/webapp
    steps:
      - checkout
      - run:
          name: Store AWS credentials
          command: |
            echo "export AWS_DEFAULT_REGION=eu-north-1" >> $BASH_ENV
            echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PULUMI_STAGING" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PULUMI_STAGING" >> $BASH_ENV
            echo "export PULUMI_CONFIG_PASSPHRASE='$PULUMI_PASSWORD_FOR_SECRETS_STAGING'" >> $BASH_ENV
      - pulumi/login:
          cloud-url: s3://pulumi.state
      - run:
          name: Install AWS CLI
          command: |
            pip3 install awscli
      - run:
          name: Delete stacks and Docker images whose branch has been deleted
          command: |
            stack_name_prefix="webapp-staging--"
            git branch -r --color=never | grep -v HEAD | sed 's,[ ]*origin/,,g' | while read -r git_branch; do
              clean_branch_name=`echo ${git_branch:0:60} | sed "s,[^A-Za-z0-9],-,g" | tr '[:upper:]' '[:lower:]'`
              echo "$stack_name_prefix$clean_branch_name" >> /tmp/stacks_to-keep.txt
            done
            # Delete stacks corresponding to deleted branches
            pulumi stack ls --cwd infra | cut -d' ' -f1 | grep -F $stack_name_prefix | while read -r stack_name; do
              if ! grep -xq "$stack_name" /tmp/stacks_to-keep.txt; then
                echo "Destroying resources of stack $stack_name ..."
                pulumi refresh --cwd infra --yes --stack $stack_name
                pulumi stack --cwd infra select $stack_name
                pulumi destroy --cwd infra --yes --remove # Destroy the rest of the resources
              fi
            done
  deploy_infra:
    docker:
      - image: cimg/node:18.16.0
    working_directory: ~/firstvet/webapp
    steps:
      - checkout
      - run:
          name: Store AWS credentials
          command: |
            echo "export AWS_DEFAULT_REGION=eu-north-1" >> $BASH_ENV
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PULUMI_PRODUCTION" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PULUMI_PRODUCTION" >> $BASH_ENV
              echo "export PULUMI_CONFIG_PASSPHRASE='$PULUMI_PASSWORD_FOR_SECRETS_PRODUCTION'" >> $BASH_ENV
              echo "export PULUMI_STATE_FILE=pulumi.state.prod" >> $BASH_ENV
              environment=production
            else
              echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PULUMI_STAGING" >> $BASH_ENV
              echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PULUMI_STAGING" >> $BASH_ENV
              echo "export PULUMI_CONFIG_PASSPHRASE='$PULUMI_PASSWORD_FOR_SECRETS_STAGING'" >> $BASH_ENV
              echo "export PULUMI_STATE_FILE=pulumi.state" >> $BASH_ENV
              environment=staging
            fi
            # Various resources (especially on the load balancer side) don't support long names or special characters
            clean_branch_name=`echo ${CIRCLE_BRANCH:0:38} | sed "s,[^A-Za-z0-9],-,g" | tr '[:upper:]' '[:lower:]'`
            echo "STACK_NAME=webapp-${environment}--${clean_branch_name}" >> $BASH_ENV
      - pulumi/login:
          cloud-url: s3://${PULUMI_STATE_FILE}
      - run:
          name: Install Pulumi SDK
          command: |
            cd infra
            npm install
      - run:
          name: Create Pulumi stack if it doesn't already exist
          command: |
            if ! $(pulumi stack ls --cwd infra | cut -d' ' -f1 | grep -xq $STACK_NAME); then
              echo 'Creating a new Pulumi stack'
              pulumi stack --cwd infra init $STACK_NAME
            fi
      - run:
          name: pulumi refresh --stack $STACK_NAME
          command: pulumi refresh --cwd infra --yes --stack $STACK_NAME
      - run:
          name: pulumi update --stack $STACK_NAME
          command: pulumi update --cwd infra --yes --stack $STACK_NAME --skip-preview
      - run:
          name: Check for newer workflow
          background: true
          command: |
            while true; do
              sleep 5
              LATEST_COMMIT=$(git ls-remote $CIRCLE_REPOSITORY_URL | grep $CIRCLE_BRANCH | cut -f 1)
              if [ "$LATEST_COMMIT" != "$CIRCLE_SHA1" ]; then
                echo "more recent commit to branch, exiting"
                curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"
              fi
            done          

workflows:
  cleanup:
    when: 
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ true, << pipeline.parameters.nightly_cleanup >> ]
    jobs:
      - delete-obsolete-stacks
  deploy:
    jobs:
      - deploy_infra:
          context:
            - DockerHub-Auth
          filters:
            branches:
              ignore:
                - master

