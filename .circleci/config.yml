# Orb 'circleci/sumologic@1.0.6' resolved to 'circleci/sumologic@1.0.6'
version: 2.1
jobs:
  sumologic/workflow-collector:
    docker:
    - image: cimg/base:stable
    resource_class: small
    steps:
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # grab jq version
          if [[ latest == "latest" ]]; then
            # extract latest version from GitHub releases API
            JQ_VERSION_STRING=$(curl --silent --show-error --location --fail --retry 3 \
              https://api.github.com/repos/stedolan/jq/releases/latest | grep tag_name | sed -E 's/"/%/g')

            IFS='%'; arrJQ_VERSION=($JQ_VERSION_STRING); unset IFS

            JQ_VERSION=${arrJQ_VERSION[3]}

            echo "Latest version of jq is $JQ_VERSION"
          else
            JQ_VERSION=latest
          fi

          # check if jq needs to be installed
          if command -v jq >> /dev/null 2>&1; then
            if jq --version | grep $JQ_VERSION >> /dev/null 2>&1; then
              echo "$JQ_VERSION is already installed"
              exit 0
            else
              echo "A different version of jq is installed ($(jq --version)); removing it"
              $SUDO rm -f $(command -v jq)
            fi
          fi

          # get source download URL for specified version
          if [[ $(curl --silent --show-error --location --fail --retry 3 \
            "https://api.github.com/repos/stedolan/jq/releases/tags/$JQ_VERSION" | \
            grep browser_download_url | grep -o -e 'https.*tar.gz') ]]; then

            JQ_SOURCE_URL=$(curl --silent --show-error --location --fail --retry 3 \
            "https://api.github.com/repos/stedolan/jq/releases/tags/$JQ_VERSION" | \
            grep browser_download_url | grep -o -e 'https.*tar.gz')
          else
            JQ_SOURCE_URL="https://github.com/stedolan/jq/archive/$JQ_VERSION.tar.gz"
          fi

          # download jq
          curl -O --silent --show-error --location --fail --retry 3 \
            "$JQ_SOURCE_URL"

          tar xf "$JQ_VERSION.tar.gz" && rm -rf "$JQ_VERSION.tar.gz"

          # extract version number
          JQ_VERSION_NUMBER_STRING=$(echo $JQ_VERSION | sed -E 's/-/ /')

          arrJQ_VERSION_NUMBER=($JQ_VERSION_NUMBER_STRING)

          JQ_VERSION_NUMBER="${arrJQ_VERSION_NUMBER[1]}"

          # get binary download URL for specified version
          # handle mac version
          if uname -a | grep Darwin > /dev/null 2>&1; then
            JQ_BINARY_URL=$(curl --silent --show-error --location --fail --retry 3 \
              "https://api.github.com/repos/stedolan/jq/releases/tags/$JQ_VERSION" | \
              grep browser_download_url | grep '/jq-osx.*64.*"' | \
              grep -o -e 'https.*jq-osx.*64.*' | sed -E 's%"%%g')
          else
            # linux version
            JQ_BINARY_URL=$(curl --silent --show-error --location --fail --retry 3 \
              "https://api.github.com/repos/stedolan/jq/releases/tags/$JQ_VERSION" | \
              grep browser_download_url | grep '/jq-linux.*64.*"' | \
              grep -o -e 'https.*jq-linux.*64.*' | sed -E 's%"%%g')
          fi

          if [ -d "$JQ_VERSION/sig" ]; then
            # import jq sigs

            if uname -a | grep Darwin > /dev/null 2>&1; then
              HOMEBREW_NO_AUTO_UPDATE=1 brew install gnupg coreutils

              PLATFORM=osx-amd64
            else
              if cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                $SUDO apk add gnupg > /dev/null 2>&1
              fi
              PLATFORM=linux64
            fi

            gpg --import "$JQ_VERSION/sig/jq-release.key" > /dev/null

            curl --output "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER/jq-$PLATFORM" \
                --silent --show-error --location --fail --retry 3 \
                "$JQ_BINARY_URL"

            # verify sha256sum, sig, install

            gpg --verify "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER/jq-$PLATFORM.asc"

            cd "$JQ_VERSION/sig/v$JQ_VERSION_NUMBER" && grep "jq-$PLATFORM" "sha256sum.txt" | \
            sha256sum -c -

          else
            curl --output "jq-$PLATFORM" \
              --silent --show-error --location --fail --retry 3 \
              "$JQ_BINARY_URL"
          fi

          $SUDO mv "jq-$PLATFORM" /usr/local/bin/jq
          $SUDO chmod +x /usr/local/bin/jq

          # verify version
          echo "jq has been installed to $(which jq)"
          echo "jq version:"
          echo "$(jq --version)"
        name: Install jq
    - run:
        command: |
          ###############
          # Begin Collecting
          ###############
          DATA_URL="https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job?circle-token=$CIRCLE_TOKEN"
          WF_DATA=$(curl -s "$DATA_URL")
          WF_MESSAGE=$(echo "$WF_DATA" | jq '.message')
          # Exit if no Workflow.
          if [ "$WF_MESSAGE" = "\"Workflow not found\"" ];
          then
            echo "No Workflow was found."
            echo "Your circle-token parameter may be wrong or you do not have access to this Workflow."
            exit 1
          fi
          WF_ITEMS=$(echo "$WF_DATA" | jq '.items')
          WF_LENGTH=$(echo "$WF_ITEMS" | jq length)
          # GET URL PATH DATA
          VCS_SHORT=$(echo $CIRCLE_BUILD_URL | cut -d"/" -f4)
          case $VCS_SHORT in
            gh)
              VCS=github
              ;;
            bb)
              VCS=bitbucket
              ;;
            *)
              echo "No VCS found. Error" && exit 1
              ;;
          esac
          # Assume the WF is currently running
          WF_FINISHED=false
          echo -e "Jobs in Workflow: $WF_LENGTH \n"
          # Exit if no other jobs in the Workflow.
          if [ "$WF_LENGTH" -lt 2 ];
          then
            echo "Only a single job has been found in the workflow, indicating this reporter is the only job in the pipeline."
            echo "Please add other jobs to the Workflow you wish to collect data on to send to Sumologic"
            exit 0
          fi
          #####################
          ## START MAIN LOOP ##
          #####################
          # Check the status of all jobs in the workflow that are not this job and wait until they have all finished.
          while [ "$WF_FINISHED" = false ]
          do
            WF_DATA=$(curl -s "$DATA_URL" | jq '.items')
            echo "Waiting for other jobs to finish..."
            #####
            # Send Workflow Data to SumoLogic
            #####
            mkdir -p /tmp/sumologic-logs/
            WF_SL_PAYLOAD=$(curl -s "$DATA_URL" | jq '.')
            echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
            curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $WORKFLOW_HTTP_SOURCE
            # for each job in the workflow fetch the status.
            # the WF_FINISHED will be assumed true unless one of the jobs in the Workflow is still running
            # the flag will then be set back to false.
            WF_FINISHED=true
            i="0"
            ################
            ### JOB LOOP ###
            ################
            while [ $i -lt "$WF_LENGTH" ]
            do
              echo "looping: $i"
              # fetch the job info
              JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
              JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
              JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
              JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
              # Only check the job if it is not this current job
              if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
              then
                echo "This is the reporter job. Skipping"
              else
                # If this job is NOT the current job, check the status
                echo "JOB: $JOB_NAME"
                echo "JOB NUM: $JOB_NUMBER"
                echo "STATUS: $JOB_STATUS"
                ### This section could be used to send data from the job while it is running. Commenting out this section currently to reduce complexity of dashboard. Updates will be sent when the job completes.
                # #####
                # # Send Job Data to SumoLogic
                # #####
                # mkdir -p /tmp/sumologic-logs/
                # ###
                # # Process Job api 1.1 Data
                # ###
                # echo
                # echo "JOB DATA URL:"
                # echo "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER"
                # JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$CIRCLE_TOKEN")
                # # removing steps,circle_yml, outcome keys from object while the workflow is incomplete.
                # JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq 'del(.circle_yml)' | jq 'del(.steps)')
                # # Write the modified data to a file
                # echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
                # curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $JOB_HTTP_SOURCE
                ###
                if [ "$JOB_STATUS" == '"success"' ] || [ "$JOB_STATUS" == '"failed"' ];
                then
                  echo "Job $JOB_NAME $JOB_NUMBER is complete - $JOB_STATUS"
                elif [ "$JOB_STATUS" == '"on_hold"' ] || [ "$JOB_STATUS" == '"blocked"' ];
                then
                  # The condition to not block metrics sending when workflow use manually approved steps or is blocked.
                  echo "Job $JOB_NAME $JOB_NUMBER need manual approval - $JOB_STATUS - skipping"
                else
                  # If it is still running, then mark WF_FINISHED as false.
                  WF_FINISHED=false
                  echo "Setting status of WF_FINISHED to false"
                fi
              fi
              echo "rerunning loop"
              i="$((i+1))"
              echo "increment loop to $i"
              echo " ---------- "
              echo
            done
            echo "Waiting 10 seconds"
            sleep 10
          done
          echo
          ################
          # WF COMPLETE  #
          ################
          echo
          echo "-------------------------------"
          echo "All jobs in Workflow complete."
          echo "Sending final report."
          echo "-------------------------------"
          echo
          echo
          ########################################
          # Send end-of-workflow data to Sumologic
          ########################################
          WF_SL_PAYLOAD=$(curl -s "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID?circle-token=$CIRCLE_TOKEN" | jq '.')
          echo "SENDING FINAL WORKFLOW DATA"
          echo $WF_SL_PAYLOAD
          echo $WF_SL_PAYLOAD > /tmp/sumologic-logs/workflow-collector.json
          curl -s -X POST -T /tmp/sumologic-logs/workflow-collector.json $WORKFLOW_HTTP_SOURCE
          ########################################
          # Send end-of-workflow jobs data to Sumologic
          ########################################
          echo "SENDING FINAL JOB INFORMATION"
          i=0
          while [ $i -lt "$WF_LENGTH" ]
            do
              echo "looping: $i"
              # fetch the job info
              JOB_DATA=$(echo "$WF_DATA" | jq --arg i "$i" ".[$i]")
              JOB_NUMBER=$(echo "$JOB_DATA" | jq ".job_number")
              JOB_STATUS=$(echo "$JOB_DATA" | jq ".status")
              JOB_NAME=$(echo "$JOB_DATA" | jq ".name")
              # Only check the job if it is not this current job
              if [ "$JOB_NUMBER" = "$CIRCLE_BUILD_NUM" ];
              then
                echo "This is the reporter job. Skipping"
              else
                # If this job is NOT the current job, check the status
                echo "JOB: $JOB_NAME"
                echo "JOB NUM: $JOB_NUMBER"
                echo "STATUS: $JOB_STATUS"
                #####
                # Send Job Data to SumoLogic
                #####
                mkdir -p /tmp/sumologic-logs/
                ###
                # Process Job api 1.1 Data
                ###
                # If $JOB_NUMBER is null, probably Approval Job. Don't process and send.
                if [ "$JOB_NUMBER" = "null" ];
                then
                  echo "Approval Job, skipping"
                else
                  JOB_DATA_RAW=$(curl -s "https://circleci.com/api/v1.1/project/$VCS/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$JOB_NUMBER?circle-token=$CIRCLE_TOKEN")
                  # removing steps and circle_yml keys from object
                  JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq 'del(.circle_yml)' | jq 'del(.steps)')
                  # manually set job name as it is currently null
                  JOB_DATA_RAW=$(echo $JOB_DATA_RAW | jq --arg JOBNAME "$JOB_NAME" '.job_name = $JOBNAME')
                  # Write the modified data to a file
                  echo $JOB_DATA_RAW > /tmp/sumologic-logs/job-collector.json
                  curl -s -X POST -T /tmp/sumologic-logs/job-collector.json $JOB_HTTP_SOURCE
                  ###
                fi
              fi
              echo "rerunning loop"
              i="$((i+1))"
              echo "increment loop to $i"
              echo " ---------- "
              echo
            done
            echo "Complete. You may now find your logs on Sumologic."
        name: Workflow Collector
  build:
    docker:
      - image: cimg/node:12.18
    steps:
      - checkout
    
#       - run:
#           name: "InstallAzureSignTool"
#           shell: powershell.exe
#           command: |
#             dotnet new tool-manifest
#             dotnet tool install --local AzureSignTool --version 2.0.17
# #       - run:
# #           name: "Build Solution"
# #           shell: powershell.exe
# #           command: |
# #             MSBuild TimekeeperSignupData.sln /property:Configuration=Release /property:Platform=x86
            
#       - run:
#           name: Install .NET 3.5
#           shell: powershell.exe
#           command: $ProgressPreference = "SilentlyContinue"; Install-WindowsFeature Net-Framework-Core
#       - run:
#           name: Install WiX
#           command: choco install wixtoolset --installargs 'INSTALLFOLDER="C:\wix"' -y     
          
#       - run:
#           name: "Build Solution"
#           shell: powershell.exe
#           command: |
#             MSBuild TimekeeperSignupData.sln /property:Configuration=Release /property:Platform=x86          
# # #
workflows:
    build_and_push:
      jobs:
        - sumologic/workflow-collector
        - build

      
      

