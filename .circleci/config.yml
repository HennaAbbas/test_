# Orb 'bizzabo/common@1.0' resolved to 'bizzabo/common@1.0.32'
version: 2
jobs:
  Common Dev:
    docker:
    - image: cimg/node:22.13.0
    resource_class: 2xlarge
    steps:
    - checkout
    - run:
        command: |-
          #!/bin/sh
          AWS_CLI_STR_AWS_CLI_VERSION="$(echo "${AWS_CLI_STR_AWS_CLI_VERSION}" | circleci env subst)"
          AWS_CLI_EVAL_INSTALL_DIR="$(eval echo "${AWS_CLI_EVAL_INSTALL_DIR}" | circleci env subst)"
          AWS_CLI_EVAL_BINARY_DIR="$(eval echo "${AWS_CLI_EVAL_BINARY_DIR}" | circleci env subst)"

          eval "$SCRIPT_UTILS"
          detect_os
          set_sudo

          # Install per platform
          if [ "$SYS_ENV_PLATFORM" = "linux" ] || [ "$SYS_ENV_PLATFORM" = "linux_alpine" ]; then
              eval "$SCRIPT_INSTALL_LINUX"
          elif [ "$SYS_ENV_PLATFORM" = "windows" ]; then
              eval "$SCRIPT_INSTALL_WINDOWS"
          elif [ "$SYS_ENV_PLATFORM" = "macos" ]; then
              eval "$SCRIPT_INSTALL_MACOS"
          else
              echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
              echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
              exit 1
          fi

          Toggle_Pager(){
              # Toggle AWS Pager
              if [ "$AWS_CLI_BOOL_DISABLE_PAGER" -eq 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >>"$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          }

          if ! command -v aws >/dev/null 2>&1; then
              Install_AWS_CLI "${AWS_CLI_STR_AWS_CLI_VERSION}"
          elif aws --version | awk '{print $2}' |grep "${AWS_CLI_STR_AWS_CLI_VERSION}"; then
              echo "AWS CLI version ${AWS_CLI_STR_AWS_CLI_VERSION} already installed. Skipping installation"
              exit 0
          elif [ "$AWS_CLI_BOOL_OVERRIDE" -eq 1 ] || [ "${AWS_CLI_STR_AWS_CLI_VERSION}" != "latest" ]; then
              Uninstall_AWS_CLI
              Install_AWS_CLI "${AWS_CLI_STR_AWS_CLI_VERSION}"
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi

          Toggle_Pager
        environment:
          AWS_CLI_BOOL_DISABLE_PAGER: true
          AWS_CLI_BOOL_OVERRIDE: false
          AWS_CLI_EVAL_BINARY_DIR: /usr/local/bin
          AWS_CLI_EVAL_INSTALL_DIR: /usr/local/aws-cli
          AWS_CLI_STR_AWS_CLI_VERSION: latest
          SCRIPT_INSTALL_LINUX: |-
            #!/bin/sh
            #shellcheck disable=SC1090
            Install_AWS_CLI() {
                echo "Installing AWS CLI v2"
                cd /tmp || exit
                if [ "$SYS_ENV_PLATFORM" = "linux_alpine" ]; then
                    apk update && apk upgrade && apk add -U curl
                    apk --no-cache add binutils
                    apk --no-cache add libcurl
                    apk --no-cache upgrade libcurl
                    apk --no-cache add aws-cli
                else
                    if [ "$1" = "latest" ]; then
                        version=""
                    else
                        version="-$1"
                    fi

                    PLATFORM=$(uname -m)
                    curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-$PLATFORM$version.zip" -o "awscliv2.zip"
                    unzip -q -o awscliv2.zip
                    $SUDO ./aws/install -i "${AWS_CLI_EVAL_INSTALL_DIR}" -b "${AWS_CLI_EVAL_BINARY_DIR}"
                    rm -r awscliv2.zip ./aws
                fi
            }

            Uninstall_AWS_CLI() {
                AWS_CLI_PATH=$(command -v aws)
                echo "$AWS_CLI_PATH"
                if [ -n "$AWS_CLI_PATH" ]; then
                    EXISTING_AWS_VERSION=$(aws --version)
                    echo "Uninstalling ${EXISTING_AWS_VERSION}"
                    # shellcheck disable=SC2012
                    if [ -L "$AWS_CLI_PATH" ]; then
                        AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                    fi
                    $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                else
                    echo "No AWS install found"
                fi
            }
          SCRIPT_INSTALL_MACOS: |-
            #!/bin/sh
            Install_AWS_CLI() {
                if [ "$1" = "latest" ]; then
                    version=""
                else
                    version="-$1"
                fi
                echo "Installing AWS CLI v2"
                cd /tmp || exit
                curl -sSL "https://awscli.amazonaws.com/AWSCLIV2$version.pkg" -o "AWSCLIV2.pkg"
                $SUDO installer -pkg AWSCLIV2.pkg -target /
                rm AWSCLIV2.pkg
            }

            Uninstall_AWS_CLI() {
                AWS_CLI_PATH=$(command -v aws)
                echo "$AWS_CLI_PATH"
                if [ -n "$AWS_CLI_PATH" ]; then
                    EXISTING_AWS_VERSION=$(aws --version)
                    echo "Uninstalling ${EXISTING_AWS_VERSION}"
                    # shellcheck disable=SC2012
                    if [ -L "$AWS_CLI_PATH" ]; then
                        AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                    fi
                    $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                else
                    echo "No AWS install found"
                fi
            }
          SCRIPT_INSTALL_WINDOWS: |-
            #!/bin/sh

            Install_AWS_CLI(){
                if [ "$1" = "latest" ]; then
                    version=""
                else
                    version="$1"
                fi
                echo "Installing AWS CLI v2"
                cd /tmp || exit

                if ! command -v choco >/dev/null 2>&1; then
                    echo "Chocolatey is required to install AWS"
                    exit 1
                fi
                yes "Yes" | choco install -y awscli --version="$version"
                echo "Installing AWS CLI version $version"
                if echo "$1" | grep -e "^2\." -e "latest"; then
                    echo "export PATH=\"\${PATH}:/c/Program Files/Amazon/AWSCLIV2\"" >> "$BASH_ENV"
                else
                    echo "export PATH=\"\${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"" >>"$BASH_ENV"
                fi
            }

            Uninstall_AWS_CLI() {
                if ! command -v choco >/dev/null 2>&1; then
                    echo "Chocolatey is required to uninstall AWS"
                    exit 1
                fi
                choco uninstall awscli
            }
          SCRIPT_UTILS: "# shellcheck disable=SC2148\ndetect_os() { \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n        if grep \"Alpine\" /etc/issue >/dev/null 2>&1; then\n            printf '%s\\n' \"Detected OS: Alpine Linux.\"\n            SYS_ENV_PLATFORM=linux_alpine\n        else\n            printf '%s\\n' \"Detected OS: Linux.\"\n            SYS_ENV_PLATFORM=linux\n        fi  \n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      SYS_ENV_PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      SYS_ENV_PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$detected_platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export SYS_ENV_PLATFORM\n}\n\nset_sudo(){\n    if [ \"$SYS_ENV_PLATFORM\" = \"linux_alpine\" ]; then\n        if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n    else\n        if [ \"$EUID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n    fi\n}"
        name: Install AWS CLI - latest
    - run:
        command: |-
          #!/bin/sh
          AWS_CLI_STR_AWS_CLI_VERSION="$(echo "${AWS_CLI_STR_AWS_CLI_VERSION}" | circleci env subst)"
          AWS_CLI_EVAL_INSTALL_DIR="$(eval echo "${AWS_CLI_EVAL_INSTALL_DIR}" | circleci env subst)"
          AWS_CLI_EVAL_BINARY_DIR="$(eval echo "${AWS_CLI_EVAL_BINARY_DIR}" | circleci env subst)"

          eval "$SCRIPT_UTILS"
          detect_os
          set_sudo

          # Install per platform
          if [ "$SYS_ENV_PLATFORM" = "linux" ] || [ "$SYS_ENV_PLATFORM" = "linux_alpine" ]; then
              eval "$SCRIPT_INSTALL_LINUX"
          elif [ "$SYS_ENV_PLATFORM" = "windows" ]; then
              eval "$SCRIPT_INSTALL_WINDOWS"
          elif [ "$SYS_ENV_PLATFORM" = "macos" ]; then
              eval "$SCRIPT_INSTALL_MACOS"
          else
              echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
              echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
              exit 1
          fi

          Toggle_Pager(){
              # Toggle AWS Pager
              if [ "$AWS_CLI_BOOL_DISABLE_PAGER" -eq 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >>"$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          }

          if ! command -v aws >/dev/null 2>&1; then
              Install_AWS_CLI "${AWS_CLI_STR_AWS_CLI_VERSION}"
          elif aws --version | awk '{print $2}' |grep "${AWS_CLI_STR_AWS_CLI_VERSION}"; then
              echo "AWS CLI version ${AWS_CLI_STR_AWS_CLI_VERSION} already installed. Skipping installation"
              exit 0
          elif [ "$AWS_CLI_BOOL_OVERRIDE" -eq 1 ] || [ "${AWS_CLI_STR_AWS_CLI_VERSION}" != "latest" ]; then
              Uninstall_AWS_CLI
              Install_AWS_CLI "${AWS_CLI_STR_AWS_CLI_VERSION}"
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi

          Toggle_Pager
        environment:
          AWS_CLI_BOOL_DISABLE_PAGER: true
          AWS_CLI_BOOL_OVERRIDE: false
          AWS_CLI_EVAL_BINARY_DIR: /usr/local/bin
          AWS_CLI_EVAL_INSTALL_DIR: /usr/local/aws-cli
          AWS_CLI_STR_AWS_CLI_VERSION: latest
          SCRIPT_INSTALL_LINUX: |-
            #!/bin/sh
            #shellcheck disable=SC1090
            Install_AWS_CLI() {
                echo "Installing AWS CLI v2"
                cd /tmp || exit
                if [ "$SYS_ENV_PLATFORM" = "linux_alpine" ]; then
                    apk update && apk upgrade && apk add -U curl
                    apk --no-cache add binutils
                    apk --no-cache add libcurl
                    apk --no-cache upgrade libcurl
                    apk --no-cache add aws-cli
                else
                    if [ "$1" = "latest" ]; then
                        version=""
                    else
                        version="-$1"
                    fi

                    PLATFORM=$(uname -m)
                    curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-$PLATFORM$version.zip" -o "awscliv2.zip"
                    unzip -q -o awscliv2.zip
                    $SUDO ./aws/install -i "${AWS_CLI_EVAL_INSTALL_DIR}" -b "${AWS_CLI_EVAL_BINARY_DIR}"
                    rm -r awscliv2.zip ./aws
                fi
            }

            Uninstall_AWS_CLI() {
                AWS_CLI_PATH=$(command -v aws)
                echo "$AWS_CLI_PATH"
                if [ -n "$AWS_CLI_PATH" ]; then
                    EXISTING_AWS_VERSION=$(aws --version)
                    echo "Uninstalling ${EXISTING_AWS_VERSION}"
                    # shellcheck disable=SC2012
                    if [ -L "$AWS_CLI_PATH" ]; then
                        AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                    fi
                    $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                else
                    echo "No AWS install found"
                fi
            }
          SCRIPT_INSTALL_MACOS: |-
            #!/bin/sh
            Install_AWS_CLI() {
                if [ "$1" = "latest" ]; then
                    version=""
                else
                    version="-$1"
                fi
                echo "Installing AWS CLI v2"
                cd /tmp || exit
                curl -sSL "https://awscli.amazonaws.com/AWSCLIV2$version.pkg" -o "AWSCLIV2.pkg"
                $SUDO installer -pkg AWSCLIV2.pkg -target /
                rm AWSCLIV2.pkg
            }

            Uninstall_AWS_CLI() {
                AWS_CLI_PATH=$(command -v aws)
                echo "$AWS_CLI_PATH"
                if [ -n "$AWS_CLI_PATH" ]; then
                    EXISTING_AWS_VERSION=$(aws --version)
                    echo "Uninstalling ${EXISTING_AWS_VERSION}"
                    # shellcheck disable=SC2012
                    if [ -L "$AWS_CLI_PATH" ]; then
                        AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                    fi
                    $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                else
                    echo "No AWS install found"
                fi
            }
          SCRIPT_INSTALL_WINDOWS: |-
            #!/bin/sh

            Install_AWS_CLI(){
                if [ "$1" = "latest" ]; then
                    version=""
                else
                    version="$1"
                fi
                echo "Installing AWS CLI v2"
                cd /tmp || exit

                if ! command -v choco >/dev/null 2>&1; then
                    echo "Chocolatey is required to install AWS"
                    exit 1
                fi
                yes "Yes" | choco install -y awscli --version="$version"
                echo "Installing AWS CLI version $version"
                if echo "$1" | grep -e "^2\." -e "latest"; then
                    echo "export PATH=\"\${PATH}:/c/Program Files/Amazon/AWSCLIV2\"" >> "$BASH_ENV"
                else
                    echo "export PATH=\"\${PATH}:/c/Program Files/Amazon/AWSCLI/bin\"" >>"$BASH_ENV"
                fi
            }

            Uninstall_AWS_CLI() {
                if ! command -v choco >/dev/null 2>&1; then
                    echo "Chocolatey is required to uninstall AWS"
                    exit 1
                fi
                choco uninstall awscli
            }
          SCRIPT_UTILS: "# shellcheck disable=SC2148\ndetect_os() { \n  detected_platform=\"$(uname -s | tr '[:upper:]' '[:lower:]')\"\n\n  case \"$detected_platform\" in\n    linux*)\n        if grep \"Alpine\" /etc/issue >/dev/null 2>&1; then\n            printf '%s\\n' \"Detected OS: Alpine Linux.\"\n            SYS_ENV_PLATFORM=linux_alpine\n        else\n            printf '%s\\n' \"Detected OS: Linux.\"\n            SYS_ENV_PLATFORM=linux\n        fi  \n      ;;\n    darwin*)\n      printf '%s\\n' \"Detected OS: macOS.\"\n      SYS_ENV_PLATFORM=macos\n      ;;\n    msys*|cygwin*)\n      printf '%s\\n' \"Detected OS: Windows.\"\n      SYS_ENV_PLATFORM=windows\n      ;;\n    *)\n      printf '%s\\n' \"Unsupported OS: \\\"$detected_platform\\\".\"\n      exit 1\n      ;;\n  esac\n\n  export SYS_ENV_PLATFORM\n}\n\nset_sudo(){\n    if [ \"$SYS_ENV_PLATFORM\" = \"linux_alpine\" ]; then\n        if [ \"$ID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n    else\n        if [ \"$EUID\" = 0 ]; then export SUDO=\"\"; else export SUDO=\"sudo\"; fi\n    fi\n}"
        name: Install AWS CLI - latest
    - run:
        command: "#!/bin/sh\n#shellcheck disable=SC1090\nAWS_CLI_STR_ACCESS_KEY_ID=\"$(echo \"\\$$AWS_CLI_STR_ACCESS_KEY_ID\" | circleci env subst)\"\nAWS_CLI_STR_SECRET_ACCESS_KEY=\"$(echo \"\\$$AWS_CLI_STR_SECRET_ACCESS_KEY\" | circleci env subst)\"\nAWS_CLI_STR_SESSION_TOKEN=\"$(echo \"$AWS_CLI_STR_SESSION_TOKEN\" | circleci env subst)\"\nAWS_CLI_STR_REGION=\"$(echo \"$AWS_CLI_STR_REGION\" | circleci env subst)\"\nAWS_CLI_STR_PROFILE_NAME=\"$(echo \"$AWS_CLI_STR_PROFILE_NAME\" | circleci env subst)\"\nAWS_CLI_BOOL_SET_AWS_ENV_VARS=\"$(echo \"$AWS_CLI_BOOL_SET_AWS_ENV_VARS\" | circleci env subst)\"\n\nif [ -z \"$AWS_CLI_STR_ACCESS_KEY_ID\" ] && [ -z \"${AWS_CLI_STR_SECRET_ACCESS_KEY}\" ] && [ \"$AWS_CLI_BOOL_SET_AWS_ENV_VARS\" = 0 ]; then \n    temp_file=\"/tmp/${AWS_CLI_STR_PROFILE_NAME}.keys\"\n    . \"$temp_file\"\nelse \n    touch \"${BASH_ENV}\"\n    . \"${BASH_ENV}\"\nfi\n\naws configure set aws_access_key_id \\\n    \"$AWS_CLI_STR_ACCESS_KEY_ID\" \\\n    --profile \"$AWS_CLI_STR_PROFILE_NAME\"\n\naws configure set aws_secret_access_key \\\n    \"$AWS_CLI_STR_SECRET_ACCESS_KEY\" \\\n    --profile \"$AWS_CLI_STR_PROFILE_NAME\"\n\nif [ -n \"${AWS_CLI_STR_SESSION_TOKEN}\" ]; then\n    aws configure set aws_session_token \\\n        \"${AWS_CLI_STR_SESSION_TOKEN}\" \\\n        --profile \"$AWS_CLI_STR_PROFILE_NAME\"\nfi\n\nif [ \"$AWS_CLI_BOOL_CONFIG_DEFAULT_REGION\" -eq \"1\" ]; then\n    aws configure set default.region \"$AWS_CLI_STR_REGION\"\nfi\n\nif [ \"$AWS_CLI_BOOL_CONFIG_PROFILE_REGION\" -eq \"1\" ]; then\n    aws configure set region \"$AWS_CLI_STR_REGION\" \\\n        --profile \"$AWS_CLI_STR_PROFILE_NAME\"\nfi\n"
        environment:
          AWS_CLI_BOOL_CONFIG_DEFAULT_REGION: true
          AWS_CLI_BOOL_CONFIG_PROFILE_REGION: true
          AWS_CLI_BOOL_SET_AWS_ENV_VARS: true
          AWS_CLI_STR_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          AWS_CLI_STR_PROFILE_NAME: default
          AWS_CLI_STR_REGION: ${AWS_REGION}
          AWS_CLI_STR_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - run:
        command: |
          aws ecr get-login-password --region ${AWS_REGION} | helm registry login  --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
        name: Login to ECR
    - run:
        command: |
          if [ -f helm-assembly/charts/bizzabo/Chart.lock ]; then
            cat helm-assembly/charts/bizzabo/Chart.lock \
              | grep "repository:" \
              | sed -E 's/.*repository:[[:space:]]*"?([^"]+)"?.*/\1/' \
              | grep -vE '^(file|oci)://' \
              | grep -vE '^[[:space:]]*$' \
              | while read -r repo; do
                  name=$(basename "$repo")
                  echo "Adding Helm repo name=$name url=$repo"
                  helm repo add "$name" "$repo"
                done
          fi
        name: Add Repos If Chart.lock Exists
    - run:
        command: |
          if [ -f charts/satori/Chart.yaml ]; then
            helm dep build charts/satori ||
             helm dep update charts/satori
          fi
        name: Helm Dep Update
    - run:
        command: |
          helm lint charts/satori
        name: Helm Lint
    - run:
        command: mkdir -p packaged_charts
        name: Creating Package Dir
    - run:
        command: |
          helm package charts/satori -d packaged_charts/ --version 0.0.0-v${CIRCLE_SHA1:0:7}
        name: Build Versioned Helm Package
    - persist_to_workspace:
        name: Persisting Packaged Chart
        paths:
        - packaged_charts
        root: .
    - store_artifacts:
        path: packaged_charts
    - run:
        command: |
          helm push packaged_charts/satori-*.tgz oci://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/
        name: Push chart
    - run:
        command: |
          rm -rf packaged_charts/satori-*.tgz
        name: Clean up packaged helm-chart
    - setup_remote_docker:
        docker_layer_caching: true
        version: default
    - run:
        command: touch $BASH_ENV
    - attach_workspace:
        at: .
    - run:
        command: |
          if cat /etc/issue | grep "Alpine" >/dev/null 2>&1; then
              if [ "$ID" = 0 ]; then export SUDO=""; else export SUDO="sudo"; fi
          else
              if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          fi

          Install_AWS_CLI() {
              echo "Installing AWS CLI v2"
              cd /tmp || exit
              # Platform check
              if uname -a | grep "Darwin"; then
                  export SYS_ENV_PLATFORM=macos
              elif uname -a | grep "x86_64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_x86
              elif uname -a | grep "aarch64 GNU/Linux"; then
                  export SYS_ENV_PLATFORM=linux_arm
              elif uname -a | grep "x86_64 Msys"; then
                  export SYS_ENV_PLATFORM=windows
              elif cat /etc/issue | grep "Alpine" >/dev/null 2>&1; then
                  export SYS_ENV_PLATFORM=linux_alpine
              else
                  echo "This platform appears to be unsupported."
                  uname -a
                  exit 1
              fi

              # Install per platform
              case $SYS_ENV_PLATFORM in
              linux_x86)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
                  rm -r awscliv2.zip ./aws
                  ;;
              windows)
                  if [ ! "$(command -v choco)" ]; then
                      echo "Chocolatey is required to uninstall AWS"
                      exit 1
                  fi
                  choco install awscli --version="$1"
                  echo "$1"
                  if echo "$1" | grep "2."; then
                      echo 'export PATH="${PATH}:/c/Program Files/Amazon/AWSCLIV2"' >>"$BASH_ENV"
                  else
                      echo 'export PATH="${PATH}:/c/Program Files/Amazon/AWSCLI/bin"' >>"$BASH_ENV"
                  fi
                  ;;
              macos)
                  curl -sSL "https://awscli.amazonaws.com/AWSCLIV2$1.pkg" -o "AWSCLIV2.pkg"
                  $SUDO installer -pkg AWSCLIV2.pkg -target /
                  rm AWSCLIV2.pkg
                  ;;
              linux_arm)
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-aarch64$1.zip" -o "awscliv2.zip"
                  unzip -q -o awscliv2.zip
                  $SUDO ./aws/install -i "${PARAM_AWS_CLI_INSTALL_DIR}" -b "${PARAM_AWS_CLI_BINARY_DIR}"
                  rm -r awscliv2.zip ./aws
                  ;;
              linux_alpine)
                  apk --no-cache add \
                      binutils \
                      curl

                  curl -L https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub
                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk
                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-bin-2.34-r0.apk
                  curl -LO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-i18n-2.34-r0.apk

                  apk add --no-cache \
                      glibc-2.34-r0.apk \
                      glibc-bin-2.34-r0.apk \
                      glibc-i18n-2.34-r0.apk

                  /usr/glibc-compat/bin/localedef -i en_US -f UTF-8 en_US.UTF-8
                  curl -sSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip" -o "awscliv2.zip"

                  echo "https://awscli.amazonaws.com/awscli-exe-linux-x86_64$1.zip"
                  unzip awscliv2.zip
                  aws/install
                  rm -r awscliv2.zip ./aws
                  ;;
              *)
                  echo "This orb does not currently support your platform. If you believe it should, please consider opening an issue on the GitHub repository:"
                  echo "https://github.com/CircleCI-Public/aws-cli-orb/issues/new"
                  exit 1
                  ;;
              esac
              # Toggle AWS Pager
              if [ "$PARAM_AWS_CLI_DISABLE_PAGER" = 1 ]; then
                  if [ -z "${AWS_PAGER+x}" ]; then
                      echo 'export AWS_PAGER=""' >>"$BASH_ENV"
                      echo "AWS_PAGER is being set to the empty string to disable all output paging for AWS CLI commands."
                      echo "You can set the 'disable-aws-pager' parameter to 'false' to disable this behavior."
                  fi
              fi
          }

          Uninstall_AWS_CLI() {
              if uname -a | grep "x86_64 Msys"; then
                  if [ ! "$(command -v choco)" ]; then
                      echo "Chocolatey is required to uninstall AWS"
                      exit 1
                  fi
                  choco uninstall awscli
              else
                  AWS_CLI_PATH=$(command -v aws)
                  echo "$AWS_CLI_PATH"
                  if [ -n "$AWS_CLI_PATH" ]; then
                      EXISTING_AWS_VERSION=$(aws --version)
                      echo "Uninstalling ${EXISTING_AWS_VERSION}"
                      # shellcheck disable=SC2012
                      if [ -L "$AWS_CLI_PATH" ]; then
                          AWS_SYMLINK_PATH=$(ls -l "$AWS_CLI_PATH" | sed -e 's/.* -> //')
                      fi
                      if uname -a | grep "x86_64 Msys"; then export SUDO=""; fi
                      $SUDO rm -rf "$AWS_CLI_PATH" "$AWS_SYMLINK_PATH" "$HOME/.aws/" "/usr/local/bin/aws" "/usr/local/bin/aws_completer" "/usr/local/aws-cli"
                  else
                      echo "No AWS install found"
                  fi
              fi
          }

          if [ ! "$(command -v aws)" ]; then
              if [ "$PARAM_AWS_CLI_VERSION" = "latest" ]; then
                  Install_AWS_CLI
              else
                  if uname -a | grep "x86_64 Msys"; then
                      Install_AWS_CLI "${PARAM_AWS_CLI_VERSION}"
                  else
                      Install_AWS_CLI "-${PARAM_AWS_CLI_VERSION}"
                  fi
              fi
          elif [ "$PARAM_AWS_CLI_OVERRIDE" = 1 ]; then
              Uninstall_AWS_CLI
              if uname -a | grep "x86_64 Msys"; then
                  Install_AWS_CLI "${PARAM_AWS_CLI_VERSION}"
              else
                  Install_AWS_CLI "-${PARAM_AWS_CLI_VERSION}"
              fi
          else
              echo "AWS CLI is already installed, skipping installation."
              aws --version
          fi
        environment:
          PARAM_AWS_CLI_BINARY_DIR: /usr/local/bin
          PARAM_AWS_CLI_DISABLE_PAGER: true
          PARAM_AWS_CLI_INSTALL_DIR: /usr/local/aws-cli
          PARAM_AWS_CLI_OVERRIDE: false
          PARAM_AWS_CLI_VERSION: latest
        name: Install AWS CLI - latest
    - run:
        command: "#!/bin/sh\nif cat /etc/issue | grep \"Alpine\" >/dev/null 2>&1; then\n    . $BASH_ENV\nfi\n\nPARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo \"\\$$PARAM_AWS_CLI_ACCESS_KEY_ID\")\nPARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo \"\\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY\")\nPARAM_AWS_CLI_REGION=$(eval echo \"\\$$PARAM_AWS_CLI_REGION\")\n\nif [ -z \"$PARAM_AWS_CLI_ACCESS_KEY_ID\" ] || [ -z \"${PARAM_AWS_CLI_SECRET_ACCESS_KEY}\" ]; then \n    echo \"Cannot configure profile. AWS access key id and AWS secret access key must be provided.\"\n    exit 1\nfi\n\naws configure set aws_access_key_id \\\n    \"$PARAM_AWS_CLI_ACCESS_KEY_ID\" \\\n    --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\n\naws configure set aws_secret_access_key \\\n    \"$PARAM_AWS_CLI_SECRET_ACCESS_KEY\" \\\n    --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\n\nif [ -n \"${AWS_SESSION_TOKEN}\" ]; then\n    aws configure set aws_session_token \\\n        \"${AWS_SESSION_TOKEN}\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n\nif [ \"$PARAM_AWS_CLI_CONFIG_DEFAULT_REGION\" = \"1\" ]; then\n    aws configure set default.region \"$PARAM_AWS_CLI_REGION\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n\nif [ \"$PARAM_AWS_CLI_CONFIG_PROFILE_REGION\" = \"1\" ]; then\n    aws configure set region \"$PARAM_AWS_CLI_REGION\" \\\n        --profile \"$PARAM_AWS_CLI_PROFILE_NAME\"\nfi\n"
        environment:
          PARAM_AWS_CLI_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID
          PARAM_AWS_CLI_CONFIG_DEFAULT_REGION: true
          PARAM_AWS_CLI_CONFIG_PROFILE_REGION: true
          PARAM_AWS_CLI_PROFILE_NAME: default
          PARAM_AWS_CLI_REGION: AWS_DEFAULT_REGION
          PARAM_AWS_CLI_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY
        name: Configure AWS Access Key ID
    - run:
        command: |
          #!/bin/bash
          ORB_EVAL_REGION=$(eval echo "${ORB_EVAL_REGION}")
          ORB_VAL_ACCOUNT_URL="${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com"
          ECR_COMMAND="ecr"

          if [ -z "${!ORB_ENV_REGISTRY_ID}" ]; then
            echo "The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing."
            exit 1
          fi

          if [ "$ORB_VAL_PUBLIC_REGISTRY" == "1" ]; then
              ORB_EVAL_REGION="us-east-1"
              ORB_VAL_ACCOUNT_URL="public.ecr.aws"
              ECR_COMMAND="ecr-public"
          fi

          if [ -n "${ORB_VAL_PROFILE_NAME}" ]; then
              set -- "$@" --profile "${ORB_VAL_PROFILE_NAME}"
          fi

          #Shellcheck disable=SC2002
          if [ -f "$HOME/.docker/config.json" ] && cat ~/.docker/config.json | grep "${ORB_VAL_ACCOUNT_URL}" > /dev/null 2>&1 ; then
              echo "Credential helper is already installed"
          else
              aws "${ECR_COMMAND}" get-login-password --region "${ORB_EVAL_REGION}" "$@" | docker login --username AWS --password-stdin "${ORB_VAL_ACCOUNT_URL}"
          fi
        environment:
          ORB_ENV_REGISTRY_ID: AWS_ACCOUNT_ID
          ORB_EVAL_REGION: ${AWS_REGION}
          ORB_VAL_PROFILE_NAME: default
          ORB_VAL_PUBLIC_REGISTRY: false
        name: Log into Amazon ECR with profile default
    - run:
        command: "#!/bin/bash\nORB_EVAL_REGION=$(eval echo \"${ORB_EVAL_REGION}\")\nORB_EVAL_REPO=$(eval echo \"${ORB_EVAL_REPO}\")\nORB_EVAL_TAG=$(eval echo \"${ORB_EVAL_TAG}\")\nORB_EVAL_PATH=$(eval echo \"${ORB_EVAL_PATH}\")\nORB_VAL_ACCOUNT_URL=\"${!ORB_ENV_REGISTRY_ID}.dkr.ecr.${ORB_EVAL_REGION}.amazonaws.com\"\nORB_EVAL_PUBLIC_REGISTRY_ALIAS=$(eval echo \"${ORB_EVAL_PUBLIC_REGISTRY_ALIAS}\")\nORB_EVAL_EXTRA_BUILD_ARGS=$(eval echo \"${ORB_EVAL_EXTRA_BUILD_ARGS}\")\nORB_EVAL_BUILD_PATH=$(eval echo \"${ORB_EVAL_BUILD_PATH}\")\nECR_COMMAND=\"ecr\"\nnumber_of_tags_in_ecr=0\n\nIFS=', ' read -ra platform <<<\"${ORB_VAL_PLATFORM}\"\nnumber_of_platforms=\"${#platform[@]}\"\n\nif [ -z \"${!ORB_ENV_REGISTRY_ID}\" ]; then\n  echo \"The registry ID is not found. Please add the registry ID as an environment variable in CicleCI before continuing.\"\n  exit 1\nfi\n\nif [ \"${ORB_VAL_PUBLIC_REGISTRY}\" == \"1\" ]; then\n  ECR_COMMAND=\"ecr-public\"\n  ORB_VAL_ACCOUNT_URL=\"public.ecr.aws/${ORB_EVAL_PUBLIC_REGISTRY_ALIAS}\"\nfi\n\nIFS=\",\" read -ra DOCKER_TAGS <<<\"${ORB_EVAL_TAG}\"\nfor tag in \"${DOCKER_TAGS[@]}\"; do\n  if [ \"${ORB_VAL_SKIP_WHEN_TAGS_EXIST}\" = \"1\" ] || [ \"${ORB_VAL_SKIP_WHEN_TAGS_EXIST}\" = \"true\" ]; then\n    docker_tag_exists_in_ecr=$(aws \"${ECR_COMMAND}\" describe-images --profile \"${ORB_VAL_PROFILE_NAME}\" --registry-id \"${!ORB_ENV_REGISTRY_ID}\" --region \"${ORB_EVAL_REGION}\" --repository-name \"${ORB_EVAL_REPO}\" --query \"contains(imageDetails[].imageTags[], '${tag}')\")\n    if [ \"${docker_tag_exists_in_ecr}\" = \"true\" ]; then\n      docker pull \"${ORB_VAL_ACCOUNT_URL}/${ORB_EVAL_REPO}:${tag}\"\n      number_of_tags_in_ecr=$((number_of_tags_in_ecr += 1))\n    fi\n  fi\n  docker_tag_args=\"${docker_tag_args} -t ${ORB_VAL_ACCOUNT_URL}/${ORB_EVAL_REPO}:${tag}\"\ndone\n\nif [ \"${ORB_VAL_SKIP_WHEN_TAGS_EXIST}\" = \"0\" ] || [[ \"${ORB_VAL_SKIP_WHEN_TAGS_EXIST}\" = \"1\" && ${number_of_tags_in_ecr} -lt ${#DOCKER_TAGS[@]} ]]; then\n  if [ \"${ORB_VAL_PUSH_IMAGE}\" == \"1\" ]; then\n    set -- \"$@\" --push\n\n    if [ -n \"${ORB_VAL_LIFECYCLE_POLICY_PATH}\" ]; then\n      aws ecr put-lifecycle-policy \\\n        --repository-name \"${ORB_EVAL_REPO}\" \\\n        --lifecycle-policy-text \"file://${ORB_VAL_LIFECYCLE_POLICY_PATH}\"\n    fi\n\n  else\n    set -- \"$@\" --load\n  fi\n\n  if [ \"${number_of_platforms}\" -gt 1 ]; then\n    # In order to build multi-architecture images, a context with binfmt installed must be used. \n    # However, Docker Layer Caching with multi-architecture builds is not currently supported\n\n    if ! docker context ls | grep builder; then\n      # We need to skip the creation of the builder context if it's already present\n      # otherwise the command will fail when called more than once in the same job.\n      docker context create builder\n      docker run --privileged --rm tonistiigi/binfmt --install all\n      docker --context builder buildx create --use\n    fi\n    context_args=\"--context builder\"\n    echo -e \"\\n \\n WARNING: Docker Layer Caching is currently not supported for multi-architecture image builds. \\n \\n\"\n  fi \n  \n  set -x\n  docker \\\n    ${context_args:+$context_args} \\\n    buildx build \\\n    -f \"${ORB_EVAL_PATH}\"/\"${ORB_VAL_DOCKERFILE}\" \\\n    ${docker_tag_args:+$docker_tag_args} \\\n    --platform \"${ORB_VAL_PLATFORM}\" \\\n    --progress plain \\\n    \"$@\" \\\n    ${ORB_EVAL_EXTRA_BUILD_ARGS:+$ORB_EVAL_EXTRA_BUILD_ARGS} \\\n    \"${ORB_EVAL_BUILD_PATH}\"\n  set +x\n  \nfi\n"
        environment:
          ORB_ENV_REGISTRY_ID: AWS_ACCOUNT_ID
          ORB_EVAL_BUILD_PATH: .
          ORB_EVAL_EXTRA_BUILD_ARGS: ' --build-arg TAG=${CIRCLE_SHA1:0:7}'
          ORB_EVAL_PATH: .
          ORB_EVAL_PUBLIC_REGISTRY_ALIAS: ${AWS_ECR_PUBLIC_REGISTRY_ALIAS}
          ORB_EVAL_REGION: ${AWS_REGION}
          ORB_EVAL_REPO: satori
          ORB_EVAL_TAG: ${CIRCLE_SHA1:0:7}
          ORB_VAL_DOCKERFILE: Dockerfile
          ORB_VAL_LIFECYCLE_POLICY_PATH: ''
          ORB_VAL_PLATFORM: linux/amd64,linux/arm64
          ORB_VAL_PROFILE_NAME: default
          ORB_VAL_PUBLIC_REGISTRY: false
          ORB_VAL_PUSH_IMAGE: true
          ORB_VAL_SKIP_WHEN_TAGS_EXIST: false
        name: Build Docker Image with buildx
        no_output_timeout: 10m
    - run:
        command: |
          MANIFEST=$(aws ecr batch-get-image --repository-name satori --image-ids imageTag=${CIRCLE_SHA1:0:7} --query 'images[].imageManifest' --output text --no-cli-pager)
          echo "done batch-get-image"
          aws ecr put-image --repository-name satori --image-tag ${CIRCLE_BRANCH} --image-manifest "$MANIFEST" --no-cli-pager
        name: Tag Image
    - run:
        command: |
          MANIFEST=$(aws ecr batch-get-image --repository-name satori --image-ids imageTag=${CIRCLE_SHA1:0:7} --query 'images[].imageManifest' --output text --no-cli-pager)
          echo "done batch-get-image"
          aws ecr put-image --repository-name satori --image-tag ${CIRCLE_BUILD_NUM} --image-manifest "$MANIFEST" --no-cli-pager
        name: Tag Image
    - run:
        command: |
          MANIFEST=$(aws ecr batch-get-image --repository-name satori --image-ids imageTag=${CIRCLE_SHA1:0:7} --query 'images[].imageManifest' --output text --no-cli-pager)
          echo "done batch-get-image"
          aws ecr put-image --repository-name satori --image-tag BUILD_${CIRCLE_BUILD_NUM} --image-manifest "$MANIFEST" --no-cli-pager
        name: Tag Image
    - run:
        command: |
          MANIFEST=$(aws ecr batch-get-image --repository-name satori --image-ids imageTag=${CIRCLE_SHA1:0:7} --query 'images[].imageManifest' --output text --no-cli-pager)
          echo "done batch-get-image"
          aws ecr put-image --repository-name satori --image-tag ${CIRCLE_USERNAME,,} --image-manifest "$MANIFEST" --no-cli-pager
        name: Tag Image
workflows:
  master-flow:
    jobs:
    - Common Dev:
        context: dev
  version: 2
